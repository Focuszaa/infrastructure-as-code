AWSTemplateFormatVersion: 2010-09-09
Description: Test create CodeBuild

Resources: 
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    DeletionPolicy: Delete
    Properties:
      Name: HermesBaseImage
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:2.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: us-east-1
          - Name: AWS_ACCOUNT_ID
            Value: 892456250180
          - Name: IMAGE_REPO_NAME
            Value: baseimage/first
          - Name: IMAGE_TAG
            Value: baseimage
      Source:
        Type: CODEPIPELINE

  CodeBuildSeconds:
    Type: AWS::CodeBuild::Project
    DeletionPolicy: Delete
    Properties:
      Name: SecondsBaseImage
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:2.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref 'AWS::Region'
          - Name: AWS_ACCOUNT_ID
            Value: !Ref 'AWS::AccountId'
          - Name: IMAGE_REPO_NAME
            Value: baseimage/seconds
          - Name: IMAGE_TAG
            Value: baseimage
      Source:
        Type: CODEPIPELINE
        BuildSpec: "buildspec-2st.yaml"


# https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-resource-codepipeline-pipeline.html
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    DeletionPolicy: Delete
    Properties: 
      Name: HermesBaseImageBuilder
      ArtifactStore: 
        Type: S3
        Location: sorcecode
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              OutputArtifacts:
                - Name: SourceBaseImage
              Configuration:
                BranchName: main
                RepositoryName: BaseImageBuilder
                PollForSourceChanges: false
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: BuildBaseImage
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              RunOrder: 1
              Configuration:
                # BatchEnabled: 'true'
                # CombineArtifacts: 'true'
                ProjectName: !Ref CodeBuildProject
                # PrimarySource: MyApplicationSource1
                # EnvironmentVariables: '[{"name":"TEST_VARIABLE","value":"TEST_VALUE","type":"PLAINTEXT"},{"name":"ParamStoreTest","value":"PARAMETER_NAME","type":"PARAMETER_STORE"}]'
              InputArtifacts:
                - Name: SourceBaseImage
            - Name: BuildBase2stImage
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              RunOrder: 1
              Configuration:
                # BatchEnabled: 'true'
                # CombineArtifacts: 'true'
                ProjectName: !Ref CodeBuildSeconds
                # PrimarySource: MyApplicationSource1
                # EnvironmentVariables: '[{"name":"TEST_VARIABLE","value":"TEST_VALUE","type":"PLAINTEXT"},{"name":"ParamStoreTest","value":"PARAMETER_NAME","type":"PARAMETER_STORE"}]'
              InputArtifacts:
                - Name: SourceBaseImage

  AmazonCloudWatchEventRule:
    Type: AWS::Events::Rule
    DeletionPolicy: Delete
    Properties:
      Name: "EventOnCodeCommit"
      Description: "Start trigger when there is a change on main branch"
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - 'CodeCommit Repository State Change'
        resources: 
          # - !Join [ '', [ 'arn:aws:codecommit:us-east-1:892456250180:BaseImageBuilder:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref RepositoryName ] ]
          - !Join [ '', [ 'arn:aws:codecommit', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', 'BaseImageBuilder' ] ]
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - main
      Targets:
        -
          Arn: 
            !Join [ '', [ 'arn:aws:codepipeline:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', 'HermesBaseImageBuilder' ] ]
            # !Join [ '', [ !GetAtt CodePipeline.Arn, !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref AppPipeline ] ]
            # arn:aws:codepipeline:us-east-1:892456250180:HermesBaseImageBuilder
          RoleArn: !GetAtt CloudWatchEventRole.Arn
          Id: HermesBaseImageBuilder

  EventSchedule:
    Type: AWS::Events::Rule
    DeletionPolicy: Delete
    Properties:
      Name: "WeeklyEventSchedule"
      Description: "Build once a week on Monday random time ~ 7-10 "
      ScheduleExpression: "cron(0 3 ? * 1 *)"
      Targets:
        -
          Arn: 
            !Join [ '', [ 'arn:aws:codepipeline:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', 'HermesBaseImageBuilder' ] ]
            # !Join [ '', [ !GetAtt CodePipeline.Arn, !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref AppPipeline ] ]
            # arn:aws:codepipeline:us-east-1:892456250180:HermesBaseImageBuilder
          RoleArn: !GetAtt CloudWatchEventRole.Arn
          Id: HermesBaseImageBuilder

  CloudWatchEventRole:
    Type: 'AWS::IAM::Role'
    DeletionPolicy: Delete
    Properties:
      Description: "Cloudwatch event service role for trigger codepipeline "
      AssumeRolePolicyDocument: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      Path: "/"
      RoleName: "cloudwatch-event-service-role"
      Policies:
        - PolicyName: codebuild-service-role-policy
          PolicyDocument: |
            {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Sid": "VisualEditor0",
                      "Effect": "Allow",
                      "Action": "codepipeline:StartPipelineExecution",
                      "Resource": "arn:aws:codepipeline:us-east-1:892456250180:HermesBaseImageBuilder"
                  }
              ]
            }
      Tags:
        - Key: "env"
          Value: "learning"

  CodeBuildRole:
    Type: 'AWS::IAM::Role'
    DeletionPolicy: Delete
    Properties:
      Description: "codebuild service role"
      AssumeRolePolicyDocument: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "codebuild.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      Path: "/"
      RoleName: "codebuild-service-role"
      Policies:
        - PolicyName: codebuild-service-role-policy
          PolicyDocument: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "CloudWatchLogsPolicy",
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "*"
                },
                {
                  "Sid": "codebuildPolicy",
                  "Effect": "Allow",
                  "Action": [
                    "codebuild:GitPull"
                  ],
                  "Resource": "*"
                },
                {
                  "Sid": "S3GetObjectPolicy",
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject",
                    "s3:GetObjectVersion"
                  ],
                  "Resource": "*"
                },
                {
                  "Sid": "S3PutObjectPolicy",
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject"
                  ],
                  "Resource": "*"
                },
                {
                  "Sid": "S3BucketIdentity",
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetBucketAcl",
                    "s3:GetBucketLocation"
                  ],
                  "Resource": "*"
                },
                {
                  "Sid": "VisualEditor0",
                  "Effect": "Allow",
                  "Action": [
                      "ecr:GetDownloadUrlForLayer",
                      "ecr:BatchGetImage",
                      "ecr:CompleteLayerUpload",
                      "ecr:GetAuthorizationToken",
                      "ecr:UploadLayerPart",
                      "ecr:InitiateLayerUpload",
                      "ecr:BatchCheckLayerAvailability",
                      "ecr:PutImage"
                  ],
                  "Resource": "*"
                }
              ]
            }
      Tags:
        - Key: "env"
          Value: "learning"

  CodePipelineRole:
    Type: 'AWS::IAM::Role'
    DeletionPolicy: Delete
    Properties:
      Description: "CodePipeline service role"
      AssumeRolePolicyDocument: |
        {
          "Version": "2012-10-17",
          "Statement": [
              {
                  "Effect": "Allow",
                  "Principal": {
                      "Service": "codepipeline.amazonaws.com"
                  },
                  "Action": "sts:AssumeRole"
              }
          ]
        }
      Path: "/"
      RoleName: "code-pipeline-service-role"
      Policies:
        - PolicyName: code-pipeline-service-role-policy
          PolicyDocument: |
            {
              "Statement": [
                  {
                      "Action": [
                          "iam:PassRole"
                      ],
                      "Resource": "*",
                      "Effect": "Allow",
                      "Condition": {
                          "StringEqualsIfExists": {
                              "iam:PassedToService": [
                                  "cloudformation.amazonaws.com",
                                  "elasticbeanstalk.amazonaws.com",
                                  "ec2.amazonaws.com",
                                  "ecs-tasks.amazonaws.com"
                              ]
                          }
                      }
                  },
                  {
                      "Action": [
                          "codecommit:CancelUploadArchive",
                          "codecommit:GetBranch",
                          "codecommit:GetCommit",
                          "codecommit:GetRepository",
                          "codecommit:GetUploadArchiveStatus",
                          "codecommit:UploadArchive"
                      ],
                      "Resource": "*",
                      "Effect": "Allow"
                  },
                  {
                      "Action": [
                          "codedeploy:CreateDeployment",
                          "codedeploy:GetApplication",
                          "codedeploy:GetApplicationRevision",
                          "codedeploy:GetDeployment",
                          "codedeploy:GetDeploymentConfig",
                          "codedeploy:RegisterApplicationRevision"
                      ],
                      "Resource": "*",
                      "Effect": "Allow"
                  },
                  {
                      "Action": [
                          "codestar-connections:UseConnection"
                      ],
                      "Resource": "*",
                      "Effect": "Allow"
                  },
                  {
                      "Action": [
                          "elasticbeanstalk:*",
                          "ec2:*",
                          "elasticloadbalancing:*",
                          "autoscaling:*",
                          "cloudwatch:*",
                          "s3:*",
                          "sns:*",
                          "cloudformation:*",
                          "rds:*",
                          "sqs:*",
                          "ecs:*"
                      ],
                      "Resource": "*",
                      "Effect": "Allow"
                  },
                  {
                      "Action": [
                          "lambda:InvokeFunction",
                          "lambda:ListFunctions"
                      ],
                      "Resource": "*",
                      "Effect": "Allow"
                  },
                  {
                      "Action": [
                          "opsworks:CreateDeployment",
                          "opsworks:DescribeApps",
                          "opsworks:DescribeCommands",
                          "opsworks:DescribeDeployments",
                          "opsworks:DescribeInstances",
                          "opsworks:DescribeStacks",
                          "opsworks:UpdateApp",
                          "opsworks:UpdateStack"
                      ],
                      "Resource": "*",
                      "Effect": "Allow"
                  },
                  {
                      "Action": [
                          "cloudformation:CreateStack",
                          "cloudformation:DeleteStack",
                          "cloudformation:DescribeStacks",
                          "cloudformation:UpdateStack",
                          "cloudformation:CreateChangeSet",
                          "cloudformation:DeleteChangeSet",
                          "cloudformation:DescribeChangeSet",
                          "cloudformation:ExecuteChangeSet",
                          "cloudformation:SetStackPolicy",
                          "cloudformation:ValidateTemplate"
                      ],
                      "Resource": "*",
                      "Effect": "Allow"
                  },
                  {
                      "Action": [
                          "codebuild:BatchGetBuilds",
                          "codebuild:StartBuild",
                          "codebuild:BatchGetBuildBatches",
                          "codebuild:StartBuildBatch"
                      ],
                      "Resource": "*",
                      "Effect": "Allow"
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "devicefarm:ListProjects",
                          "devicefarm:ListDevicePools",
                          "devicefarm:GetRun",
                          "devicefarm:GetUpload",
                          "devicefarm:CreateUpload",
                          "devicefarm:ScheduleRun"
                      ],
                      "Resource": "*"
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "servicecatalog:ListProvisioningArtifacts",
                          "servicecatalog:CreateProvisioningArtifact",
                          "servicecatalog:DescribeProvisioningArtifact",
                          "servicecatalog:DeleteProvisioningArtifact",
                          "servicecatalog:UpdateProduct"
                      ],
                      "Resource": "*"
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "cloudformation:ValidateTemplate"
                      ],
                      "Resource": "*"
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "ecr:DescribeImages"
                      ],
                      "Resource": "*"
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "states:DescribeExecution",
                          "states:DescribeStateMachine",
                          "states:StartExecution"
                      ],
                      "Resource": "*"
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "appconfig:StartDeployment",
                          "appconfig:StopDeployment",
                          "appconfig:GetDeployment"
                      ],
                      "Resource": "*"
                  }
              ],
              "Version": "2012-10-17"
            }
      Tags:
        - Key: "env"
          Value: "learning"
